import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
import mongoose from "mongoose";
import User from "./src/models/User.js";

dotenv.config();

// —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });


// üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log("‚úÖ MongoDB connected");
}).catch((err) => {
  console.error("‚ùå MongoDB connection error:", err);
});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, "üé∞ –í—ñ—Ç–∞—é –≤ Telegram –ö–∞–∑–∏–Ω–æ!", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "üïπÔ∏è –ì—Ä–∞—Ç–∏ –≤ –∫–∞–∑–∏–Ω–æ",
            web_app: {
              url: process.env.WEB_APP_URL,
            },
          },
        ],
      ],
    },
  });
});


bot.onText(/\/balance/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();

  try {
    let user = await User.findOne({ telegramId });

    // –Ø–∫—â–æ —é–∑–µ—Ä–∞ –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ
    if (!user) {
      user = await User.create({ telegramId });
      bot.sendMessage(chatId, `üëã –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç. –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance}‚Ç¥`);
    } else {
      bot.sendMessage(chatId, `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance}‚Ç¥`);
    }
  } catch (err) {
    console.error(err);
    bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É.");
  }
});